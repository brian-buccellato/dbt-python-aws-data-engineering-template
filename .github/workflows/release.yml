name: release

on:
  release:
    types: [created]

jobs:
  update-infrastructure:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: us-east-1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      - name: Terraform Init
        run: |
          cd terraform
          terraform init
      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan
      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve
  deploy-to-ecs:
    runs-on: ubuntu-latest
    needs: update-infrastructure
    env:
      AWS_REGION: ${{ var.AWS_REGION }}
      ECS_CLUSTER: ${{ var.ECS_CLUSTER }}
      ECR_PYTHON_REPOSITORY: ${{ var.ECR_PYTHON_REPOSITORY }}
      ECR_DBT_REPOSITORY: ${{ var.ECR_DBT_REPOSITORY }}
      PYTHON_CONTAINER: ${{ var.PYTHON_CONTAINER }}
      DBT_CONTAINER: ${{ var.DBT_CONTAINER }}
      PYTHON_ECS_TASK_DEFINITION: ./python-ingestors/python-ingestor-task-definition.json
      DBT_ECS_TASK_DEFINITION: ./dbt-transformations/dbt-transformations-task-definition.json
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Log into AWS ecr
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push python image to ecr
        id: python-build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd python-ingestors
          docker build -t $ECR_REGISTRY/$ECR_PYTHON_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_PYTHON_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_PYTHON_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Update Python ECS task definition
        id: python-update-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.PYTHON_ECS_TASK_DEFINITION }}
          container-name: ${{ env.PYTHON_CONTAINER }}
          image: ${{ steps.python-build-image.outputs.image }}
      - name: Register Python ECS Task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.python-update-task-def.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}
      - name: Build and push dbt image to ecr
        id: dbt-build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd dbt-transformations
          docker build -t $ECR_REGISTRY/$ECR_DBT_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_DBT_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_DBT_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      - name: Update DBT ECS task definition
        id: dbt-update-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.DBT_ECS_TASK_DEFINITION }}
          container-name: ${{ env.DBT_CONTAINER }}
          image: ${{ steps.dbt-build-image.outputs.image }}
      - name: Register DBT ECS Task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.dbt-update-task-def.outputs.task-definition }}
          cluster: ${{ env.ECS_CLUSTER }}

